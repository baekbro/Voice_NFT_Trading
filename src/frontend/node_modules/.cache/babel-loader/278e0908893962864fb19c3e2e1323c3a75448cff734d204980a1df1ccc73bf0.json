{"ast":null,"code":"import apiService from \"../services/api\";\n\n// URL에서 토큰 추출\nexport const getTokenFromUrl = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"token\");\n};\n\n// URL에서 에러 추출\nexport const getErrorFromUrl = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(\"error\");\n};\n\n// JWT 토큰 디코딩 (페이로드만)\nexport const decodeToken = token => {\n  try {\n    const base64Url = token.split(\".\")[1];\n    const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const jsonPayload = decodeURIComponent(atob(base64).split(\"\").map(c => \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2)).join(\"\"));\n    return JSON.parse(jsonPayload);\n  } catch (error) {\n    console.error(\"토큰 디코딩 실패:\", error);\n    return null;\n  }\n};\n\n// 토큰 유효성 검사\nexport const isTokenValid = token => {\n  if (!token) return false;\n  try {\n    const decoded = decodeToken(token);\n    if (!decoded) return false;\n    const currentTime = Date.now() / 1000;\n    return decoded.exp > currentTime;\n  } catch (error) {\n    return false;\n  }\n};\n\n// 현재 사용자 정보 가져오기\nexport const getCurrentUser = () => {\n  const token = apiService.getToken();\n  if (!token || !isTokenValid(token)) {\n    return null;\n  }\n  return decodeToken(token);\n};\n\n// 로그인 상태 확인\nexport const isAuthenticated = () => {\n  const token = apiService.getToken();\n  return token && isTokenValid(token);\n};\n\n// 로그아웃\nexport const logout = () => {\n  apiService.removeToken();\n  window.location.href = \"/login\";\n};\n\n// 소셜 로그인 시작\nexport const startSocialLogin = provider => {\n  const loginUrl = apiService.getSocialLoginUrl(provider);\n  window.location.href = loginUrl;\n};\n\n// URL 파라미터 정리\nexport const cleanUrl = () => {\n  const url = new URL(window.location);\n  url.searchParams.delete(\"token\");\n  url.searchParams.delete(\"error\");\n  window.history.replaceState({}, document.title, url.toString());\n};","map":{"version":3,"names":["apiService","getTokenFromUrl","urlParams","URLSearchParams","window","location","search","get","getErrorFromUrl","decodeToken","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","error","console","isTokenValid","decoded","currentTime","Date","now","exp","getCurrentUser","getToken","isAuthenticated","logout","removeToken","href","startSocialLogin","provider","loginUrl","getSocialLoginUrl","cleanUrl","url","URL","searchParams","delete","history","replaceState","document","title"],"sources":["C:/study/Legend_Project/Voice_NFT_Trading/src/frontend/src/utils/auth.js"],"sourcesContent":["import apiService from \"../services/api\";\r\n\r\n// URL에서 토큰 추출\r\nexport const getTokenFromUrl = () => {\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  return urlParams.get(\"token\");\r\n};\r\n\r\n// URL에서 에러 추출\r\nexport const getErrorFromUrl = () => {\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  return urlParams.get(\"error\");\r\n};\r\n\r\n// JWT 토큰 디코딩 (페이로드만)\r\nexport const decodeToken = (token) => {\r\n  try {\r\n    const base64Url = token.split(\".\")[1];\r\n    const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split(\"\")\r\n        .map((c) => \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join(\"\")\r\n    );\r\n    return JSON.parse(jsonPayload);\r\n  } catch (error) {\r\n    console.error(\"토큰 디코딩 실패:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 토큰 유효성 검사\r\nexport const isTokenValid = (token) => {\r\n  if (!token) return false;\r\n\r\n  try {\r\n    const decoded = decodeToken(token);\r\n    if (!decoded) return false;\r\n\r\n    const currentTime = Date.now() / 1000;\r\n    return decoded.exp > currentTime;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\n// 현재 사용자 정보 가져오기\r\nexport const getCurrentUser = () => {\r\n  const token = apiService.getToken();\r\n  if (!token || !isTokenValid(token)) {\r\n    return null;\r\n  }\r\n\r\n  return decodeToken(token);\r\n};\r\n\r\n// 로그인 상태 확인\r\nexport const isAuthenticated = () => {\r\n  const token = apiService.getToken();\r\n  return token && isTokenValid(token);\r\n};\r\n\r\n// 로그아웃\r\nexport const logout = () => {\r\n  apiService.removeToken();\r\n  window.location.href = \"/login\";\r\n};\r\n\r\n// 소셜 로그인 시작\r\nexport const startSocialLogin = (provider) => {\r\n  const loginUrl = apiService.getSocialLoginUrl(provider);\r\n  window.location.href = loginUrl;\r\n};\r\n\r\n// URL 파라미터 정리\r\nexport const cleanUrl = () => {\r\n  const url = new URL(window.location);\r\n  url.searchParams.delete(\"token\");\r\n  url.searchParams.delete(\"error\");\r\n  window.history.replaceState({}, document.title, url.toString());\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}