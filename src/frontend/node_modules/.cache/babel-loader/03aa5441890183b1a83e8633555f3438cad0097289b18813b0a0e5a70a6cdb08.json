{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000\";\nclass ApiService {\n  constructor() {\n    // 인증 관련 API\n    this.auth = {\n      // Instagram 가입 완료\n      completeInstagram: (token, email) => this.post(\"/api/auth/complete-instagram\", {\n        token,\n        email\n      }),\n      // 사용자 프로필 조회\n      getProfile: () => this.get(\"/api/auth/profile\"),\n      // 로그아웃\n      logout: () => {\n        this.removeToken();\n        return Promise.resolve();\n      }\n    };\n    this.baseURL = API_BASE_URL;\n  }\n\n  // 토큰 가져오기\n  getToken() {\n    return localStorage.getItem(\"authToken\");\n  }\n\n  // 토큰 설정\n  setToken(token) {\n    localStorage.setItem(\"authToken\", token);\n  }\n\n  // 토큰 제거\n  removeToken() {\n    localStorage.removeItem(\"authToken\");\n  }\n\n  // 기본 fetch 래퍼\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const token = this.getToken();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...(token && {\n          Authorization: `Bearer ${token}`\n        }),\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"API request failed\");\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"API Error:\", error);\n      throw error;\n    }\n  }\n\n  // GET 요청\n  async get(endpoint) {\n    return this.request(endpoint, {\n      method: \"GET\"\n    });\n  }\n\n  // POST 요청\n  async post(endpoint, data) {\n    return this.request(endpoint, {\n      method: \"POST\",\n      body: JSON.stringify(data)\n    });\n  }\n\n  // PUT 요청\n  async put(endpoint, data) {\n    return this.request(endpoint, {\n      method: \"PUT\",\n      body: JSON.stringify(data)\n    });\n  }\n\n  // DELETE 요청\n  async delete(endpoint) {\n    return this.request(endpoint, {\n      method: \"DELETE\"\n    });\n  }\n  // 소셜 로그인 URL 생성\n  getSocialLoginUrl(provider) {\n    return `${this.baseURL}/api/auth/${provider}`;\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","auth","completeInstagram","token","email","post","getProfile","get","logout","removeToken","Promise","resolve","baseURL","getToken","localStorage","getItem","setToken","setItem","removeItem","request","endpoint","options","url","config","headers","Authorization","response","fetch","ok","error","json","Error","message","console","method","data","body","JSON","stringify","put","delete","getSocialLoginUrl","provider"],"sources":["C:/study/Legend_Project/Voice_NFT_Trading/src/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000\";\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n  }\r\n\r\n  // 토큰 가져오기\r\n  getToken() {\r\n    return localStorage.getItem(\"authToken\");\r\n  }\r\n\r\n  // 토큰 설정\r\n  setToken(token) {\r\n    localStorage.setItem(\"authToken\", token);\r\n  }\r\n\r\n  // 토큰 제거\r\n  removeToken() {\r\n    localStorage.removeItem(\"authToken\");\r\n  }\r\n\r\n  // 기본 fetch 래퍼\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    const token = this.getToken();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        ...(token && { Authorization: `Bearer ${token}` }),\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.message || \"API request failed\");\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"API Error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // GET 요청\r\n  async get(endpoint) {\r\n    return this.request(endpoint, { method: \"GET\" });\r\n  }\r\n\r\n  // POST 요청\r\n  async post(endpoint, data) {\r\n    return this.request(endpoint, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  // PUT 요청\r\n  async put(endpoint, data) {\r\n    return this.request(endpoint, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  // DELETE 요청\r\n  async delete(endpoint) {\r\n    return this.request(endpoint, { method: \"DELETE\" });\r\n  }\r\n\r\n  // 인증 관련 API\r\n  auth = {\r\n    // Instagram 가입 완료\r\n    completeInstagram: (token, email) =>\r\n      this.post(\"/api/auth/complete-instagram\", { token, email }),\r\n\r\n    // 사용자 프로필 조회\r\n    getProfile: () => this.get(\"/api/auth/profile\"),\r\n\r\n    // 로그아웃\r\n    logout: () => {\r\n      this.removeToken();\r\n      return Promise.resolve();\r\n    },\r\n  };\r\n\r\n  // 소셜 로그인 URL 생성\r\n  getSocialLoginUrl(provider) {\r\n    return `${this.baseURL}/api/auth/${provider}`;\r\n  }\r\n}\r\n\r\nexport default new ApiService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}