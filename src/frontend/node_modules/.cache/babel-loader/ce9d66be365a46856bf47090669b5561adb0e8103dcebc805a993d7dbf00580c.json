{"ast":null,"code":"var _jsxFileName = \"C:\\\\study\\\\Legend_Project\\\\Voice_NFT_Trading\\\\src\\\\frontend\\\\src\\\\contexts\\\\AppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useOptimistic, useTransition, useEffect } from \"react\";\nimport { isAuthenticated, getCurrentUser } from \"../utils/auth\";\nimport apiService from \"../services/api\";\n\n// React 19: Context를 직접 Provider로 사용 가능\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\n_c = AppContext;\nexport const useAppContext = () => {\n  _s();\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error(\"useAppContext must be used within an AppProvider\");\n  }\n  return context;\n};\n_s(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AppProvider = ({\n  children\n}) => {\n  _s2();\n  // 기본 상태\n  const [user, setUser] = useState(null);\n  const [nfts, setNfts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // React 19: useOptimistic으로 낙관적 업데이트\n  const [optimisticNfts, addOptimisticNft] = useOptimistic(nfts, (currentNfts, newNft) => [...currentNfts, {\n    ...newNft,\n    isPending: true\n  }]);\n\n  // React 19: useTransition으로 비동기 작업 관리\n  const [isPending, startTransition] = useTransition();\n\n  // 초기화 시 인증 상태 확인\n  useEffect(() => {\n    const initializeAuth = async () => {\n      if (isAuthenticated()) {\n        try {\n          const currentUser = getCurrentUser();\n          if (currentUser) {\n            // 서버에서 최신 사용자 정보 가져오기\n            const userProfile = await apiService.auth.getProfile();\n            setUser(userProfile);\n          }\n        } catch (error) {\n          console.error(\"사용자 정보 로드 실패:\", error);\n          // 토큰이 유효하지 않은 경우 제거\n          apiService.removeToken();\n        }\n      }\n      setIsInitialized(true);\n    };\n    initializeAuth();\n  }, []);\n\n  // NFT 생성 액션 (React 19 Actions 패턴)\n  const createNftAction = async nftData => {\n    // 낙관적 업데이트로 즉시 UI 반영\n    addOptimisticNft(nftData);\n    startTransition(async () => {\n      try {\n        setIsLoading(true);\n        // 실제 API 호출 시뮬레이션\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        const newNft = {\n          ...nftData,\n          id: Date.now(),\n          createdAt: new Date().toISOString(),\n          isPending: false\n        };\n        setNfts(prev => [...prev, newNft]);\n      } catch (error) {\n        console.error(\"NFT 생성 실패:\", error);\n        // 에러 시 낙관적 업데이트 롤백 (자동으로 처리됨)\n      } finally {\n        setIsLoading(false);\n      }\n    });\n  };\n\n  // 지갑 연결 액션\n  const connectWalletAction = async walletType => {\n    startTransition(async () => {\n      try {\n        setIsLoading(true);\n        // 지갑 연결 시뮬레이션\n        await new Promise(resolve => setTimeout(resolve, 1500));\n        setUser({\n          id: \"user_\" + Date.now(),\n          address: \"0x\" + Math.random().toString(16).substr(2, 40),\n          walletType,\n          connectedAt: new Date().toISOString()\n        });\n      } catch (error) {\n        console.error(\"지갑 연결 실패:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    });\n  };\n\n  // 로그아웃 액션\n  const logoutAction = () => {\n    apiService.removeToken();\n    setUser(null);\n    setNfts([]);\n  };\n  const value = {\n    // 상태\n    user,\n    nfts: optimisticNfts,\n    // 낙관적 업데이트된 NFT 목록\n    isLoading: isLoading || isPending,\n    isPending,\n    isInitialized,\n    isAuthenticated: !!user,\n    // 액션들\n    createNftAction,\n    connectWalletAction,\n    logoutAction,\n    setUser,\n    setNfts\n  };\n\n  // React 19: Context를 직접 Provider로 사용\n  return /*#__PURE__*/_jsxDEV(AppContext, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 10\n  }, this);\n};\n_s2(AppProvider, \"Hr37HZn1U9iQHxA/pagkPfhWg2g=\", false, function () {\n  return [useOptimistic, useTransition];\n});\n_c2 = AppProvider;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContext\");\n$RefreshReg$(_c2, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useOptimistic","useTransition","useEffect","isAuthenticated","getCurrentUser","apiService","jsxDEV","_jsxDEV","AppContext","_c","useAppContext","_s","context","Error","AppProvider","children","_s2","user","setUser","nfts","setNfts","isLoading","setIsLoading","isInitialized","setIsInitialized","optimisticNfts","addOptimisticNft","currentNfts","newNft","isPending","startTransition","initializeAuth","currentUser","userProfile","auth","getProfile","error","console","removeToken","createNftAction","nftData","Promise","resolve","setTimeout","id","Date","now","createdAt","toISOString","prev","connectWalletAction","walletType","address","Math","random","toString","substr","connectedAt","logoutAction","value","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/study/Legend_Project/Voice_NFT_Trading/src/frontend/src/contexts/AppContext.js"],"sourcesContent":["import React, {\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  useOptimistic,\r\n  useTransition,\r\n  useEffect,\r\n} from \"react\";\r\nimport { isAuthenticated, getCurrentUser } from \"../utils/auth\";\r\nimport apiService from \"../services/api\";\r\n\r\n// React 19: Context를 직접 Provider로 사용 가능\r\nconst AppContext = createContext();\r\n\r\nexport const useAppContext = () => {\r\n  const context = useContext(AppContext);\r\n  if (!context) {\r\n    throw new Error(\"useAppContext must be used within an AppProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AppProvider = ({ children }) => {\r\n  // 기본 상태\r\n  const [user, setUser] = useState(null);\r\n  const [nfts, setNfts] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n\r\n  // React 19: useOptimistic으로 낙관적 업데이트\r\n  const [optimisticNfts, addOptimisticNft] = useOptimistic(\r\n    nfts,\r\n    (currentNfts, newNft) => [...currentNfts, { ...newNft, isPending: true }]\r\n  );\r\n\r\n  // React 19: useTransition으로 비동기 작업 관리\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  // 초기화 시 인증 상태 확인\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      if (isAuthenticated()) {\r\n        try {\r\n          const currentUser = getCurrentUser();\r\n          if (currentUser) {\r\n            // 서버에서 최신 사용자 정보 가져오기\r\n            const userProfile = await apiService.auth.getProfile();\r\n            setUser(userProfile);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"사용자 정보 로드 실패:\", error);\r\n          // 토큰이 유효하지 않은 경우 제거\r\n          apiService.removeToken();\r\n        }\r\n      }\r\n      setIsInitialized(true);\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  // NFT 생성 액션 (React 19 Actions 패턴)\r\n  const createNftAction = async (nftData) => {\r\n    // 낙관적 업데이트로 즉시 UI 반영\r\n    addOptimisticNft(nftData);\r\n\r\n    startTransition(async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        // 실제 API 호출 시뮬레이션\r\n        await new Promise((resolve) => setTimeout(resolve, 2000));\r\n\r\n        const newNft = {\r\n          ...nftData,\r\n          id: Date.now(),\r\n          createdAt: new Date().toISOString(),\r\n          isPending: false,\r\n        };\r\n\r\n        setNfts((prev) => [...prev, newNft]);\r\n      } catch (error) {\r\n        console.error(\"NFT 생성 실패:\", error);\r\n        // 에러 시 낙관적 업데이트 롤백 (자동으로 처리됨)\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  // 지갑 연결 액션\r\n  const connectWalletAction = async (walletType) => {\r\n    startTransition(async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        // 지갑 연결 시뮬레이션\r\n        await new Promise((resolve) => setTimeout(resolve, 1500));\r\n\r\n        setUser({\r\n          id: \"user_\" + Date.now(),\r\n          address: \"0x\" + Math.random().toString(16).substr(2, 40),\r\n          walletType,\r\n          connectedAt: new Date().toISOString(),\r\n        });\r\n      } catch (error) {\r\n        console.error(\"지갑 연결 실패:\", error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  // 로그아웃 액션\r\n  const logoutAction = () => {\r\n    apiService.removeToken();\r\n    setUser(null);\r\n    setNfts([]);\r\n  };\r\n\r\n  const value = {\r\n    // 상태\r\n    user,\r\n    nfts: optimisticNfts, // 낙관적 업데이트된 NFT 목록\r\n    isLoading: isLoading || isPending,\r\n    isPending,\r\n    isInitialized,\r\n    isAuthenticated: !!user,\r\n\r\n    // 액션들\r\n    createNftAction,\r\n    connectWalletAction,\r\n    logoutAction,\r\n    setUser,\r\n    setNfts,\r\n  };\r\n\r\n  // React 19: Context를 직접 Provider로 사용\r\n  return <AppContext value={value}>{children}</AppContext>;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}